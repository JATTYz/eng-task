"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.vcfToJSON = void 0;
var axios_1 = require("axios");
var fetchVEP = function (vepInput) { return __awaiter(void 0, void 0, void 0, function () {
    var url, response;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                url = "https://rest.ensembl.org/vep/homo_sapiens/region?uniprot=true";
                return [4 /*yield*/, axios_1.default
                        .post(url, {
                        variants: vepInput,
                    }, {
                        headers: {
                            "Content-Type": "application/json",
                        },
                    })
                        .catch(function (e) {
                        throw new Error("Error loading VEP data: " + e);
                    })];
            case 1:
                response = _a.sent();
                if (response) {
                    return [2 /*return*/, new Map(response.data.map(function (vepLine) { return [
                            vepLine.seq_region_name + ":" + vepLine.start,
                            vepLine,
                        ]; }))];
                }
                return [2 /*return*/, null];
        }
    });
}); };
var parseInfo = function (info) {
    if (!info) {
        return null;
    }
    var infoArray = info.split(";");
    return (infoArray
        .map(function (infoItem) {
        var _a;
        // NOTE: should maybe use a regex here?
        var splitItem = infoItem.split(/=/);
        if (splitItem.length < 2) {
            return null;
        }
        return _a = {}, _a[splitItem[0]] = splitItem[1].replace(/"/g, ""), _a;
    })
        // Filter out null
        .filter(function (item) { return item; }));
};
var readLines = function (fileContents) {
    var jsonArray = [];
    var rl = fileContents.split(/\r?\n/g);
    for (var _i = 0, rl_1 = rl; _i < rl_1.length; _i++) {
        var line = rl_1[_i];
        if (line.startsWith("#")) {
            // Note: could check the column headers here
            continue;
        }
        /**
         * There are 9 fixed fields, labelled “CHROM”, “POS”, “ID”, “REF”, “ALT”, “QUAL”, “FILTER”, “INFO” and “FORMAT”
         * Following these are fields containing data about samples, which usually contain a genotype call for each
         * sample plus some associated data.
         * */
        var columns = line.split(/\t/g);
        var rowJSON = {
            vcfLine: line,
            chrom: columns[0],
            pos: parseInt(columns[1]),
        };
        if (columns[2]) {
            rowJSON["id"] = columns[2];
        }
        if (columns[3]) {
            rowJSON["ref"] = columns[3];
        }
        if (columns[4]) {
            rowJSON["alt"] = columns[4];
        }
        if (columns[5]) {
            rowJSON["qual"] = columns[5];
        }
        if (columns[6]) {
            rowJSON["filter"] = columns[6];
        }
        if (columns[7]) {
            rowJSON["info"] = parseInfo(columns[7]);
        }
        if (columns[8]) {
            rowJSON["format"] = columns[8];
        }
        if (columns.length > 8) {
            rowJSON["sampleData"] = columns.filter(function (item, i) {
                return item.length && i > 8;
            });
        }
        jsonArray.push(rowJSON);
    }
    return jsonArray;
};
exports.vcfToJSON = function (vcf, options) { return __awaiter(void 0, void 0, void 0, function () {
    var jsonArray, VEPData_1;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, readLines(vcf)];
            case 1:
                jsonArray = _a.sent();
                if (!(options === null || options === void 0 ? void 0 : options.runVEP)) return [3 /*break*/, 3];
                return [4 /*yield*/, fetchVEP(jsonArray.map(function (_a) {
                        var vcfLine = _a.vcfLine;
                        return vcfLine;
                    }))];
            case 2:
                VEPData_1 = _a.sent();
                if (VEPData_1) {
                    return [2 /*return*/, jsonArray.map(function (row) {
                            var vep = VEPData_1.get(row.chrom + ":" + row.pos);
                            // TODO notify if not found
                            return vep
                                ? __assign(__assign({}, row), { vep: vep }) : row;
                        })];
                }
                else
                    throw new Error("Could not load VEP data");
                _a.label = 3;
            case 3: return [2 /*return*/, jsonArray];
        }
    });
}); };
